#!/bin/bash

###
###
### Verifies local Docker images against the result obtained by pulling the 
###  image refs securely via Notary.
###
### 

BASEDIR="$(cd $(dirname "${0}"); pwd)"

print_usage() {
    cat << EOF
Usage: docker-verify-pulled-images [-p PREFIX] [-c CACHE_APPROVAL_SUFFIX]

See the manpage for more information.
EOF
}

parse_cmdline_args() {
    while [[ ${#} -gt 1 ]]; do
        key="${1}"
        case "${key}" in
    
            -p)
                PREFIX="${2}"
                shift
                ;;
    
            -c)
                CACHE_VERIFICATION_SUFFIX="${2}"
                shift 
                ;;

            *)
                echo "Unknown option ${key}. Usage: ${0} [-p prefix] [-c cache_verification_suffix]"
                exit 1
                ;;
        esac
        shift
    done
}

##
## Log a failure to standard out
##
record_failure() {
    echo "${1}"
    echo "${2}" >&2
    EXIT_VAL=1
}

##
## Are we caching approvals?
##
should_cache_approvals() {
    [[ -n "$CACHE_VERIFICATION_SUFFIX" ]]  
}

##
## List all refs that refer to a given image
## Output is whitespace separated
##
get_all_refs_for_image() {
    local image_ref="$1"

    ## See https://docs.docker.com/engine/reference/commandline/inspect/ and
    ##   http://container-solutions.com/docker-inspect-template-magic/
    ##    to understand this voodoo.
    ##
    invoke_docker inspect --type image --format "{{range\ .RepoTags}}\ {{.}}\ {{end}}" "${image_ref}"
}

##
## If an image can be referred to by its "approved" tag, this is an
##  indication that the image has been approved by this cronjob.
get_approved_ref() {
    local original_ref="$1"
    echo "${original_ref}_${CACHE_VERIFICATION_SUFFIX}"
}

## Returns whether this image ref is itself an approval tag
is_an_approval() {
    if should_cache_approvals; then
        local image_ref="$1"
        local retval
        grep -q -P "_${CACHE_VERIFICATION_SUFFIX}$" <<< "${image_ref}"
    else
        false
    fi
}

## Is this image approved?
is_approved() {
    if should_cache_approvals; then
        local image_ref="$1"
        local approved_ref="$(get_approved_ref "$image_ref")"
        get_all_refs_for_image "${image_ref}" | grep -q " ${approved_ref} "
    else
        false
    fi
}

## Create a tag marking this image as approved
mark_approved() {
    if should_cache_approvals; then
        local image_ref="$1"
        local approved_ref="$(get_approved_ref "$image_ref")"
        invoke_docker tag "$image_ref" "$approved_ref"
    fi
}

## List all local Docker image refs of the form repository:tag
get_all_local_image_refs() {
    invoke_docker images --no-trunc --format "{{.Repository}}:{{.Tag}}" | grep -v '<none>' | sort
}

## Verify all local image refs beginning with the user-specified ${PREFIX}
main() {
    if test "$1" == "--help"; then
        print_usage
        exit 1
    fi
    parse_cmdline_args "${@}"
    source "${BASEDIR}/../lib/notary-util"
    local exit_val=0
    local image_refs="$(get_all_local_image_refs | grep -P "^${PREFIX}")"
    local image_ref
    local output
    for image_ref in ${image_refs}; do
        if ! is_approved "${image_ref}" && ! is_an_approval "${image_ref}"; then
            if output="$(${BASEDIR}/docker-verify-pulled-image "${image_ref}")"; then
                mark_approved "${image_ref}"
            else
                record_failure "${image_ref}" "${output}"
                exit_val=1
            fi        
        fi      
    done
    return ${exit_val}
}

main "${@}"
